----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date: 05/17/2023 02:04:47 PM
-- Design Name: 
-- Module Name: Program_Counter - Behavioral
-- Project Name: 
-- Target Devices: 
-- Tool Versions: 
-- Description: 
-- 
-- Dependencies: 
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
-- 
----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity Program_Counter is
    Port ( Res : in STD_LOGIC;
           Clk : in STD_LOGIC;
           D_IN : in STD_LOGIC_VECTOR( 2 downto 0);
           Q : out std_logic_vector( 2 downto 0):= "000");
end Program_Counter;

architecture Behavioral of Program_Counter is
 COMPONENT D_FF
        PORT(D : IN STD_LOGIC;
             Res : IN STD_LOGIC;
             Clk : IN STD_LOGIC;
             Q : OUT STD_LOGIC ;
             Qbar : OUT STD_LOGIC );
    END COMPONENT;
    
        

    
    SIGNAL Q0, Q1, Q2 : STD_LOGIC;
    SIGNAL D0, D1, D2 : STD_LOGIC;
    SIGNAL Clk_slow : STD_LOGIC;  -- INTERNAL CLOCK
    SIGNAL D  : STD_LOGIC_VECTOR (2 downto 0) := "000";

begin

--begin
process (Clk) begin 
    if(rising_edge(Clk)) then
        if (Res='1') then 
            Q<="000";
         else 
         

        Q<=D_IN;
        end if;
        
    end if ;
end process;
-- D_FF0 : D_FF
--        PORT MAP(
--            D => D(0),
--            Res => Res,
--            Clk => Clk,
--            Q => Q(0)
--        );
--    D_FF1 : D_FF
--        PORT MAP(
--            D => D(1),
--            Res => Res,
--            Clk => CLk,
--            Q => Q(1)
--        );
--    D_FF2 : D_FF
--        PORT MAP(
--            D => D(2),
--            Res => Res,
--            Clk => Clk,
--            Q => Q(2)
--        );

 
    
--    D2 <= (Q2 and not(Q1)) OR (not(Q2) AND Q1 AND Q0) OR (Q2 AND Q1 AND not(Q0));
--    D1 <=  (not(Q1) AND Q0) OR  (Q1 AND not(Q0));
--    D0 <= (not( Q1) AND not(Q0)) OR (Q1 AND not(Q0));
 
--process (Clk)

--begin
--if(rising_edge(Clk)) then
--   D <=D_IN;
         
    
--end if;

--end process;



end Behavioral;
